version: "3.8"

services:
  postgres:
    image: postgres:13
    container_name: aqi_postgres
    restart: always
    env_file: .env
    environment:
      POSTGRES_MULTIPLE_DATABASES: airflow,aqi,mlflow
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./init/init-multiple-db.sh:/docker-entrypoint-initdb.d/init-multiple-db.sh
    ports:
      - "5432:5432"

  airflow-webserver:
    # image: apache/airflow:2.7.3-python3.9
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: airflow_webserver
    restart: always
    depends_on:
      - postgres
    env_file: .env
    environment:
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_SECRET_KEY}
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      PYTHONPATH: /opt/airflow
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - ./requirements.txt:/requirements.txt
      - ./data:/opt/airflow/data
      - ./reports:/opt/airflow/reports
      - ./mlruns:/mlruns
      - ./evidently_workspace:/workspace
    ports:
      - "8080:8080"
    command: >
      bash -c "pip install -r /requirements.txt &&
                pip install evidently==0.6.7 &&
               airflow db init &&
               airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com &&
               airflow webserver"

  airflow-scheduler:
    # image: apache/airflow:2.7.3-python3.9
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: airflow_scheduler
    restart: always
    depends_on:
      - airflow-webserver
    env_file: .env
    environment:
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_SECRET_KEY}
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/airflow
      PYTHONPATH: /opt/airflow
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - ./requirements.txt:/requirements.txt
      - ./data:/opt/airflow/data
      - ./reports:/opt/airflow/reports
      - ./mlruns:/mlruns
      - ./evidently_workspace:/workspace
    command: >
      bash -c "pip install -r /requirements.txt &&
               pip install evidently==0.6.7 &&
               airflow scheduler"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    restart: always
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
    ports:
      - "9092:9092"
      - "29092:29092"

  kafka-cli:
    image: bitnami/kafka:latest
    container_name: kafka_cli
    depends_on:
      - kafka
    entrypoint: /bin/bash
    tty: true
    networks:
      - default

  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    container_name: mlflow
    restart: always
    env_file: .env
    environment:
      BACKEND_STORE_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/mlflow
      ARTIFACT_ROOT: /mlruns
    # depends_on:
    #   postgres:
    #     condition: service_healthy
    volumes:
      - ./mlruns:/mlruns
    ports:
      - "5000:5000"
    command: >
      mlflow server
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/mlflow
      --default-artifact-root mlflow-artifacts:/
      --serve-artifacts
      --artifacts-destination /mlruns
      --host 0.0.0.0
      --port 5000

  jenkins:
    build:
      context: .
      dockerfile: Dockerfile.jenkins
    container_name: jenkins
    restart: always
    user: root
    ports:
      - "8081:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - ./scripts:/opt/airflow/scripts
      - ./mlruns:/mlruns
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - default
    environment:
      JAVA_OPTS: "-Djenkins.install.runSetupWizard=false"

  api_aqi: # ← nom du service
    build:
      context: .
      dockerfile: Dockerfile.fastapi # ton Dockerfile léger
    container_name: fastapi
    restart: always

    # 1) variables d’environnement
    env_file: .env # reprend MLFLOW_TRACKING_URI
    environment:
      AQI_MODEL_NAME: lgbm_european_aqi # nom exact dans MLflow Registry
      AQI_MODEL_STAGE: Production # Promotion automatique
      MLFLOW_TRACKING_URI: http://mlflow:5000
      PYTHONPATH: /opt/airflow # pour trouver ton package

    # 2) dépendances réseau
    depends_on:
      - postgres
      - mlflow # besoin d’accéder au modèle
    ports:
      # - "8000:${API_PORT:-8000}"
      - "8000:8000"

    # 3) volumes utiles
    volumes:
      - ./app:/app # ton code FastAPI
      - ./mlruns:/mlruns # artefacts MLflow
      - ./scripts:/opt/airflow/scripts
      - ./data:/data

  evidently-ui:
    image: python:3.9-slim # image légère ; pas besoin d’Airflow
    env_file: .env
    container_name: evidently-ui
    restart: always
    ports:
      - "8900:8000" # 8900 côté hôte → 8000 dans le conteneur
    volumes:
      - ./evidently_workspace:/workspace
    command: >
      bash -c "
        pip install --no-cache-dir evidently==0.6.7 &&
        evidently ui --workspace /workspace --host 0.0.0.0 --port 8000
      "

volumes:
  pg_data:
  mlruns:
  jenkins_home:
